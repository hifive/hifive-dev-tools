<?xml version="1.0" encoding="UTF-8"?>
<project name="h5devtool-builder" basedir="." default="build">
	<!-- hifive-resプロジェクトのパスを指定してください -->
	<property name="hifive-res.dir" value="../../hifive-res" />
	<property name="res.jquery1.js" value="${hifive-res.dir}/ext/jquery/jquery-1.js" />
	<property name="res.jquery2.js" value="${hifive-res.dir}/ext/jquery/jquery-2.js" />
	<property name="res.hifive.css" value="${hifive-res.dir}/fw/current/h5.css" />
	<property name="res.ejs-h5mod.js" value="${hifive-res.dir}/fw/current/ejs-h5mod.js" />
	<property name="res.hifive.js" value="${hifive-res.dir}/fw/current/h5.js" />
	<property name="res.hifive.dev.js" value="${hifive-res.dir}/fw/current/h5.dev.js" />

	<property name="webcontent.dir" value="WebContent" />
	<property name="src.dir" value="${webcontent.dir}/src" />
	<property name="src.h5diag.js" value="h5.diag.js" />
	<property name="src.devtool.js" value="h5-dev-tool.js" />
	<property name="src.devtool-child.js" value="h5-dev-tool-child.js" />
	<property name="src.devtool-common.js" value="h5-dev-tool-common.js" />
	<property name="src.devtool.css" value="h5-dev-tool.css" />
	<property name="src.devtool.html" value="h5-dev-tool.html" />
	<property name="build.dir" value="${webcontent.dir}/build" />
	<property name="build.tmp.dir" value="${build.dir}/tmp" />
	<property name="build.dev.filename" value="h5-dev-tool.dev.js" />
	<property name="build.min.filename" value="h5-dev-tool.js" />
	<property name="build.css.filename" value="h5-dev-tool.css" />

	<property name="build.supplement.html.filename" value="h5-dev-tool.html" />
	<property name="build.config" value="${basedir}/config/build" />
	<property name="constructionFile" value="h5-dev-file-construction.xml"/>
	<property name="minTempFile" value="template/hifive-dev-min-js.vm" />
	<property name="devTempFile" value="template/hifive-dev-js.vm" />
	<property name="childJsTempFile" value="template/hifive-dev-child-js.vm" />
	<property name="childCssTempFile" value="template/hifive-dev-child-css.vm" />

	<property name="lib.project.dir" value="./lib" />

	<path id="base.path">
		<fileset dir="${lib.project.dir}" includes="**/*.jar" />
	</path>

	<taskdef name="jscomp" classname="com.google.javascript.jscomp.ant.CompileTask" classpathref="base.path" />
	<taskdef name="buildService" classname="com.htmlhifive.dev.service.ant.GenericBuilderServiceTask" classpathref="base.path" />
	<taskdef name="childScriptBuildService" classname="com.htmlhifive.dev.service.ant.GenericBuilderServiceTask" classpathref="base.path" />

	<target name="clean">
		<delete dir="${build.dir}" />
		<mkdir dir="${build.dir}" />
	</target>

	<target name="getVersion" unless="versionNumber">
		<input message="バージョン番号を入力してください。(ex. 1.0.1)" addproperty="versionNumber" />
		<condition property="isCorrectNumber">
			<matches pattern="[0-9]+\.[0-9]+\.[0-9]+" string="${versionNumber}" />
		</condition>
		<fail unless="isCorrectNumber" message="正しいバージョン番号を入力してください。" />
	</target>

	<target name="getGitHash">
		<property name="git.dir" value="../.git/logs/HEAD" />
		<available file="${git.dir}" property="git.exists" />
		<fail unless="git.exists" message="${git.dir}が存在しません" />
		<loadfile srcfile="${git.dir}" property="gitCommitId">
			<filterchain>
				<tailfilter lines="1" />
				<striplinebreaks />
				<replaceregex pattern="[A-z0-9]+ ([A-z0-9]+) .*" replace="\1" />
			</filterchain>
		</loadfile>
		<echo message="gitCommitId: ${gitCommitId}" />
	</target>

	<target name="devtool-build" depends="clean,getGitHash">
		<buildService>
			<buildParameter
				tmpFiles="false"
				devName="${build.dev.filename}"
				releaseName="${build.min.filename}"
				jsDir="${src.dir}"
				dstDir="${build.dir}"
				version="${versionNumber}"
				configBaseDir="${build.config}"
				jsTemplateFile="${devTempFile}"
				minHeaderFile="${minTempFile}"
				moduleNames="devtool"
				constructionFile="${constructionFile}" />
			<velocityParameter name="gitCommitId" value="${gitCommitId}" />
		</buildService>
	</target>

	<target name="html-build">
		<!-- h5-dev-tool.htmlファイルにscriptやcssを埋め込む -->
		<!-- replaceregexで\文字を置換後の文字に指定できないので、\文字を一旦エスケープする -->
		<!-- スクリプト埋め込み後にエスケープした\文字を元に戻している -->
		<property name="escape-backslash" value="##escape-backslash##" />
		<!-- {##jquery-start##}から{##jquery-end##}の箇所にjqueryを埋め込み -->
		<loadfile property="tmp.jquery1" srcfile="${res.jquery1.js}" />
		<loadfile property="tmp.jquery2" srcfile="${res.jquery2.js}" />
		<mkdir dir="${build.tmp.dir}" />
		<copy file="${src.dir}/${src.devtool.html}" tofile="${build.tmp.dir}/${src.devtool.html}" />

		<!-- h5-dev-tool.htmlファイルにversion、gitCommitIdを埋め込む -->
		<replaceregexp encoding="UTF-8" flags="gs" replace="${versionNumber}">
			<fileset dir="${build.tmp.dir}" includes="${src.devtool.html}" />
			<regexp pattern="\{##version##\}" />
		</replaceregexp>
		<replaceregexp encoding="UTF-8" flags="g" replace="${gitCommitId}">
			<fileset dir="${build.tmp.dir}" includes="${src.devtool.html}" />
			<regexp pattern="\{##gitCommitId##\}" />
		</replaceregexp>

		<script language="javascript"><![CDATA[
			var replaceCode = ('<!--[if lt IE 9]>\n<script>'
				+ project.getProperty('tmp.jquery1')
				+ '</script>\n<![endif]--><!--[if gte IE 9]><!-->\n<script>'
				+ project.getProperty('tmp.jquery2')
				+ '</script>\n<!--<![endif]-->');
			// \文字と$文字のエスケープ
			replaceCode = replaceCode.replace(/\$/g, '$$').replace(/\\/g, project.getProperty('escape-backslash'));
			project.setNewProperty('tmp.jqueryload',replaceCode);
		]]></script>
		<!-- jquery1,jquery2の読み分け -->
		<replaceregexp encoding="UTF-8" flags="gs" replace="${tmp.jqueryload}">
			<fileset dir="${build.tmp.dir}" includes="${src.devtool.html}" />
			<regexp pattern="\&lt;!-- \{##jquery-start##\}.*?\{##jquery-end##\} --\&gt;" />
		</replaceregexp>

		<!-- {##hifive-start##}から{##hifive-end##}の箇所にhifiveを埋め込み -->
		<loadfile property="tmp.hifive.css" srcfile="${res.hifive.css}" />
		<loadfile property="tmp.hifive.js" srcfile="${res.hifive.js}" />
		<loadfile property="tmp.ejs.js" srcfile="${res.ejs-h5mod.js}" />
		<script language="javascript"><![CDATA[
			var replaceCode = ('<style>'
				+ ('' + project.getProperty('tmp.hifive.css')).replace(/^@charset ['|"]utf-8['|"];/i, '')
				+ '\n</style>\n<script>\n'
				+ project.getProperty('tmp.ejs.js')
				+ '\n</script>\n<script>\n'
				+ project.getProperty('tmp.hifive.js')
				+ '\n</script>');
			// \文字と$文字のエスケープ
			replaceCode = replaceCode.replace(/\$/g, '$$').replace(/\\/g, project.getProperty('escape-backslash'));
			project.setNewProperty('tmp.hifiveload',replaceCode);
		]]></script>
		<replaceregexp encoding="UTF-8" flags="gs" replace="${tmp.hifiveload}">
			<fileset dir="${build.tmp.dir}" includes="${src.devtool.html}" />
			<regexp pattern="\&lt;!-- \{##hifive-start##\}.*?\{##hifive-end##\} --\&gt;" />
		</replaceregexp>

		<!-- {##devtool-start##}から{##devtool-end##}の箇所にdevtoolスクリプトを埋め込み -->
		<childScriptBuildService>
			<buildParameter
				tmpFiles="false"
				devName="tmp-h5-dev-tool-child.dev.js"
				releaseName="tmp-h5-dev-tool-child.js"
				cssName="tmp-h5-dev-tool-child.css"
				jsDir="${src.dir}"
				cssDir="${src.dir}"
				dstDir="${build.tmp.dir}"
				configBaseDir="${build.config}"
				cssTemplateFile="${childCssTempFile}"
				jsTemplateFile="${devTempFile}"
				minHeaderFile="${childJsTempFile}"
				moduleNames="devtool-child"
				constructionFile="${constructionFile}" />
			<velocityParameter name="gitCommitId" value="${gitCommitId}" />
		</childScriptBuildService>
		<loadfile property="tmp.devtool-child.css" srcfile="${build.tmp.dir}/tmp-h5-dev-tool-child.css" />
		<loadfile property="tmp.devtool-child.js" srcfile="${build.tmp.dir}/tmp-h5-dev-tool-child.js" />
		<script language="javascript"><![CDATA[
			var replaceCode = ('<style>\n'
				+ ('' + project.getProperty('tmp.devtool-child.css')).replace(/^@charset ['|"]utf-8['|"];/i, '')
				+ '\n</style>\n<script>\n'
				+ project.getProperty('tmp.devtool-child.js')
				+ '\n</script>');
			// \文字と$文字のエスケープ
			replaceCode = replaceCode.replace(/\$/g, '$$').replace(/\\/g, project.getProperty('escape-backslash'));
			project.setNewProperty('tmp.devtoolload',replaceCode);
		]]></script>
		<replaceregexp encoding="UTF-8" flags="gs" replace="${tmp.devtoolload}">
		<fileset dir="${build.tmp.dir}" includes="${src.devtool.html}" />
		<regexp pattern="\&lt;!-- \{##devtool-start##\}.*?\{##devtool-end##\} --\&gt;" />
		</replaceregexp>

		<!-- \文字をエスケープしたものを元に戻す -->
		<replaceregexp encoding="UTF-8" flags="gs" replace="\\\\">
			<fileset dir="${build.tmp.dir}" includes="${src.devtool.html}" />
			<regexp pattern="${escape-backslash}" />
		</replaceregexp>

		<!-- htmlファイルをbuildに出力 -->
		<copy file="${build.tmp.dir}/${src.devtool.html}" tofile="${build.dir}/${build.supplement.html.filename}" />
	</target>

	<target name="setHeadVersion">
		<tstamp>
			<format property="timestamp"  pattern="yyyy-MM-dd_HH-mm-ss-SSS" />
		</tstamp>
		<property name="versionNumber" value="Nightly_${timestamp}"/>
	</target>

	<target name="build" depends="getVersion,devtool-build,html-build">
		<!-- tmpフォルダの削除 -->
		<delete dir="${build.tmp.dir}" />

		<property name="output.dir" location="${build.dir}" />
		<echo message="ビルドしたファイルを${output.dir}に出力しました。" />
	</target>

	<target name="build-nightly" depends="setHeadVersion,devtool-build,html-build">
		<!-- tmpフォルダの削除 -->
		<delete dir="${build.tmp.dir}" />

		<property name="output.dir" location="${build.dir}" />
		<touch file="${build.dir}/NIGHTLY" />
		<echo message="ビルドしたファイルを${output.dir}に出力しました。" />
	</target>
</project>